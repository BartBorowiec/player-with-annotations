{"version":3,"sources":["Player.js","ElementsBox.js","AnnotationList.js","App.js","serviceWorker.js","index.js"],"names":["Player","$","droppable","drop","event","ui","addNewAnnotation","top","offsetY","left","offsetX","accept","on","e","props","saveDuration","target","duration","each","id","element","arrayElement","annotations","currentTime","start","removeClass","addClass","draggable","containment","resizable","position","annotation","text","this","className","controls","autoPlay","loop","muted","src","poster","width","map","i","key","style","data-id","onChange","handleChange","value","React","Component","ElementsBox","console","log","helper","AnnotationList","handles","minHeight","stop","axis","updateAnnotationDuration","App","state","scale","newArray","dataset","setState","scaleLinear","domain","range","closest","invert","getBoundingClientRect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5b172daa.chunk.js","sourcesContent":["import React from 'react';\r\nimport $ from 'jquery';\r\n\r\nimport './Player.scss';\r\n\r\nclass Player extends React.Component {\r\n    componentDidMount() {\r\n        $(\".player-wrapper\").droppable({\r\n            drop: (event, ui) => {\r\n                this.addNewAnnotation({\r\n                    top: event.offsetY,\r\n                    left: event.offsetX\r\n                })\r\n            },\r\n            accept: $(\".annotation-tile\")\r\n        });\r\n        $(\"video\").on(\"loadedmetadata\", (e) => {\r\n            this.props.saveDuration(e.target.duration);\r\n        })\r\n        $(\"video\").on(\"timeupdate\",(e) => {\r\n            $(\".annotation\").each((id, element) => {\r\n                const arrayElement = this.props.annotations[id];\r\n                if (e.target.currentTime >= arrayElement.start \r\n                    && e.target.currentTime <= arrayElement.start + arrayElement.duration) {\r\n                    $(element).removeClass(\"hidden\");\r\n                } else {\r\n                    $(element).addClass(\"hidden\");\r\n                }\r\n            });\r\n        });\r\n        $(\".annotation\").draggable({\r\n            containment: $(\".player-wrapper\")\r\n        });\r\n        $(\".annotation\").resizable({\r\n            containment: $(\".player-wrapper\")\r\n        });\r\n    }\r\n    componentDidUpdate() {\r\n        $(\".annotation\").draggable({\r\n            containment: $(\".player-wrapper\")\r\n        });\r\n        $(\".annotation\").resizable({\r\n            containment: $(\".player-wrapper\")\r\n        });\r\n    }\r\n\r\n    addNewAnnotation(position) {\r\n        const {top, left} = position;\r\n        const annotation = {\r\n            top: top,\r\n            left: left,\r\n            text: \"Enter text...\",\r\n            start: 0,\r\n            duration: $(\"video\")[0].duration\r\n        }\r\n        this.props.addNewAnnotation(annotation);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"player-wrapper\">\r\n                <video controls autoPlay loop muted\r\n                        src=\"https://archive.org/download/BigBuckBunny_124/Content/big_buck_bunny_720p_surround.mp4\"\r\n                        poster=\"https://peach.blender.org/wp-content/uploads/title_anouncement.jpg?x11217\"\r\n                        width=\"500px\">        \r\n                </video>\r\n                {this.props.annotations.map((annotation, i)=> {\r\n                    return <div key={i} className=\"annotation hidden\" style={{\r\n                            top: annotation.top || 0,\r\n                            left: annotation.left || 0\r\n                        }}>\r\n                            <textarea data-id={i} onChange={(e)=>this.props.handleChange(e)} value={annotation.text}></textarea>\r\n                        </div>;\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Player;\r\n","import React from 'react';\r\nimport * as $ from 'jquery';\r\n\r\nimport './ElementsBox.scss';\r\n\r\nclass ElementsBox extends React.Component {\r\n    componentDidMount() {\r\n        console.log($(\".elements-box\"))\r\n        $(\".annotation-tile\").draggable({\r\n            helper: \"clone\"\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"elements-box\">\r\n                <div className=\"annotation-tile\">\r\n                    Add annotation\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ElementsBox;\r\n","import React from 'react';\r\nimport $ from 'jquery';\r\n\r\nimport './AnnotationList.scss';\r\n\r\nclass AnnotationList extends React.Component {\r\n    componentDidMount() {\r\n        $(\".annotation-inner\").resizable({\r\n            handles: \"e, w\",\r\n            containment: \"parent\",\r\n            minHeight: 30,\r\n            stop: (event, ui)=>{\r\n                \r\n            } \r\n        });\r\n        $(\".annotation-inner\").draggable({\r\n            axis: \"x\",\r\n            containment: \"parent\"\r\n        });\r\n    }\r\n    componentDidUpdate() {\r\n        $(\".annotation-inner\").resizable({\r\n            handles: \"e, w\",\r\n            containment: \"parent\",\r\n            stop: (event, ui)=>{\r\n                this.props.updateAnnotationDuration(event, ui)\r\n            } \r\n        });\r\n        $(\".annotation-inner\").draggable({\r\n            axis: \"x\",\r\n            containment: \"parent\",\r\n            stop: (event, ui)=>{\r\n                this.props.updateAnnotationDuration(event, ui)\r\n            } \r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"annotations-list\">\r\n                {this.props.annotations.map((annotation, i) => {\r\n                    return (\r\n                        <div key={i} className=\"annotation-outer\">\r\n                            <div data-id={i} className=\"annotation-inner\">\r\n                                <textarea data-id={i} value={annotation.text} onChange={(e)=>this.props.handleChange(e)}></textarea>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AnnotationList;\r\n","import React from 'react';\nimport { scaleLinear } from 'd3-scale';\nimport $ from 'jquery';\nimport 'jquery-ui/ui/widgets/resizable';\nimport 'jquery-ui/ui/widgets/droppable';\nimport 'jquery-ui/ui/widgets/draggable';\nimport 'jquery-ui/themes/base/resizable.css';\nimport 'jquery-ui/themes/base/draggable.css';\n\nimport Player from './Player';\nimport ElementsBox from './ElementsBox';\nimport AnnotationList from './AnnotationList';\nimport './App.scss';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      annotations: [],\n      scale: null\n    };\n  }\n  handleChange(e) {\n    const newArray = [...this.state.annotations];\n    newArray[e.target.dataset.id].text = e.target.value;\n    this.setState({\n      annotations: newArray\n    });\n  }\n  addNewAnnotation(annotation) {\n    this.setState({\n      annotations: [...this.state.annotations, annotation]\n    });\n  }\n  saveDuration(duration) {\n    const scale = scaleLinear().domain([0, duration]);\n    this.setState({\n      scale: scale\n    });\n  }\n  updateAnnotationDuration(event, ui) {\n    const { scale } = this.state;\n    scale.range([0, $(event.target.closest(\".annotation-outer\")).width()])\n    const newArray = [...this.state.annotations];\n    newArray[event.target.dataset.id].start = scale.invert(ui.position.left);\n    newArray[event.target.dataset.id].duration = scale.invert(ui.position.left + ui.helper[0].getBoundingClientRect().width);\n    this.setState({\n      annotations: newArray\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <Player\n          saveDuration={(duration)=>this.saveDuration(duration)}\n          handleChange={(e)=>this.handleChange(e)}\n          addNewAnnotation={(annotation)=>this.addNewAnnotation(annotation)}\n          annotations={this.state.annotations}>\n        </Player>\n        <ElementsBox></ElementsBox>\n        <AnnotationList updateAnnotationDuration={(event, ui) => this.updateAnnotationDuration(event, ui)}\n          handleChange={(e)=>this.handleChange(e)}\n          annotations={this.state.annotations}>\n        </AnnotationList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}